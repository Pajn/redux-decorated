{"version":3,"sources":["index.test.js","../../src/index.test.ts"],"names":["Object","defineProperty","exports","value","mock_functions_1","require","index_1","describe","it","actions","createActions","create","save","meta","toString","expect","toEqual","type","prefix","reducer","createReducer","when","s","a","handler1","createMockFunction","returns","handler2","calls","length","handler","payload","args","stateMapper","_","old","deeply","nested","property","result","removeIn","toBe","not","toBeDefined"],"mappings":"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","file":"index.test.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference types=\"jest\" />\nconst mock_functions_1 = require(\"mock-functions\");\nconst index_1 = require(\"./index\");\ndescribe('createActions', () => {\n    it('should return an instance with type set on every action', () => {\n        const actions = index_1.createActions({\n            create: {},\n            save: {\n                meta: {\n                    toString: true,\n                }\n            },\n        });\n        expect(actions.create).toEqual({ type: 'create' });\n        expect(actions.save).toEqual({ type: 'save', meta: { toString: true } });\n    });\n    it('should keep properties set on the actions', () => {\n        const actions = index_1.createActions({\n            create: { type: 'new' },\n        });\n        expect(actions.create).toEqual({ type: 'new' });\n    });\n    it('should support setting a prefx', () => {\n        const actions = index_1.createActions({\n            create: {},\n        }, { prefix: 'test' });\n        expect(actions.create).toEqual({ type: 'testcreate' });\n    });\n});\ndescribe('createReducer', () => {\n    it('should return a chainable builder', () => {\n        const reducer = index_1.createReducer([]);\n        expect(reducer.when({ type: 'type' }, (s, a) => s)).toEqual(reducer);\n    });\n    it('should call the correct handler when an action is fired', () => {\n        const handler1 = mock_functions_1.createMockFunction().returns('1');\n        const handler2 = mock_functions_1.createMockFunction().returns('2');\n        const reducer = index_1.createReducer([])\n            .when({ type: '1' }, handler1)\n            .when({ type: '2' }, handler2);\n        expect(reducer([], { type: '1' })).toEqual('1');\n        expect(handler1.calls.length).toEqual(1);\n        expect(handler2.calls.length).toEqual(0);\n    });\n    it('should return the initial state if no action matches', () => {\n        const handler1 = mock_functions_1.createMockFunction().returns('1');\n        const handler2 = mock_functions_1.createMockFunction().returns('2');\n        const reducer = index_1.createReducer('0')\n            .when({ type: '1' }, handler1)\n            .when({ type: '2' }, handler2);\n        expect(reducer('', { type: '3' })).toEqual('0');\n        expect(handler1.calls.length).toEqual(0);\n        expect(handler2.calls.length).toEqual(0);\n    });\n    it('should return the current state if no action matches', () => {\n        const handler1 = mock_functions_1.createMockFunction().returns('1');\n        const handler2 = mock_functions_1.createMockFunction().returns('2');\n        const reducer = index_1.createReducer('0')\n            .when({ type: '1' }, handler1)\n            .when({ type: '2' }, handler2);\n        expect(reducer('3', { type: '0' })).toEqual('3');\n        expect(handler1.calls.length).toEqual(0);\n        expect(handler2.calls.length).toEqual(0);\n    });\n    it('should pass the payload and state to the handler', () => {\n        const handler = mock_functions_1.createMockFunction();\n        const reducer = index_1.createReducer('0')\n            .when({ type: '1' }, handler);\n        reducer('2', { type: '1', payload: '3' });\n        expect(handler.calls.length).toEqual(1);\n        expect(handler.calls[0].args).toEqual(['2', '3']);\n    });\n    describe('handlers returning a function to modify state', () => {\n        it('should pass the payload and state to the handler', () => {\n            const stateMapper = mock_functions_1.createMockFunction();\n            const handler = mock_functions_1.createMockFunction().returns(stateMapper);\n            const reducer = index_1.createReducer('0')\n                .when({ type: '1' }, (_, payload) => handler(payload));\n            reducer('2', { type: '1', payload: '3' });\n            expect(handler.calls.length).toEqual(1);\n            expect(stateMapper.calls.length).toEqual(1);\n            expect(handler.calls[0].args).toEqual(['3']);\n            expect(stateMapper.calls[0].args).toEqual(['2']);\n        });\n        it('should return the value returned by the handler', () => {\n            const reducer = index_1.createReducer('0')\n                .when({ type: '1' }, _ => _ => '3');\n            expect(reducer('2', { type: '1' })).toEqual('3');\n        });\n    });\n});\ndescribe('removeIn', () => {\n    it('should be able to remove a deep preoperty', () => {\n        const old = { deeply: { nested: { property: true } } };\n        const result = index_1.removeIn(['deeply', 'nested', 'property'], old);\n        expect(old.deeply.nested.property).toBe(true);\n        expect(result.deeply.nested.property).not.toBeDefined();\n    });\n    it('should be able to remove an intem in an array', () => {\n        const old = [1, 2, 3];\n        const result = index_1.removeIn(1, old);\n        expect(old).toEqual([1, 2, 3]);\n        expect(result).toEqual([1, 3]);\n    });\n});\n","/// <reference types=\"jest\" />\nimport {createMockFunction} from 'mock-functions'\nimport {Action, createActions, createReducer, removeIn} from './index'\n\ndescribe('createActions', () => {\n  it('should return an instance with type set on every action', () => {\n    const actions = createActions({\n      create: {} as Action<{name: string}>,\n      save: {\n        meta: {\n          toString: true,\n        }\n      } as Action<{}>,\n    })\n\n    expect(actions.create).toEqual({type: 'create'})\n    expect(actions.save).toEqual({type: 'save', meta: {toString: true}})\n  })\n\n  it('should keep properties set on the actions', () => {\n    const actions = createActions({\n      create: {type: 'new'} as Action<{name: string}>,\n    })\n\n    expect(actions.create).toEqual({type: 'new'})\n  })\n\n  it('should support setting a prefx', () => {\n    const actions = createActions({\n      create: {} as Action<{name: string}>,\n    }, {prefix: 'test'})\n\n    expect(actions.create).toEqual({type: 'testcreate'})\n  })\n})\n\ndescribe('createReducer', () => {\n\n  it('should return a chainable builder', () => {\n    const reducer = createReducer([])\n\n    expect(reducer.when({type: 'type'}, (s, a) => s as any)).toEqual(reducer)\n  })\n\n  it('should call the correct handler when an action is fired', () => {\n    const handler1 = createMockFunction().returns('1')\n    const handler2 = createMockFunction().returns('2')\n    const reducer = createReducer([])\n      .when({type: '1'}, handler1)\n      .when({type: '2'}, handler2)\n\n    expect(reducer([], {type: '1'})).toEqual('1')\n    expect(handler1.calls.length).toEqual(1)\n    expect(handler2.calls.length).toEqual(0)\n  })\n\n  it('should return the initial state if no action matches', () => {\n    const handler1 = createMockFunction().returns('1')\n    const handler2 = createMockFunction().returns('2')\n    const reducer = createReducer('0')\n      .when({type: '1'}, handler1)\n      .when({type: '2'}, handler2)\n\n    expect(reducer('', {type: '3'})).toEqual('0')\n    expect(handler1.calls.length).toEqual(0)\n    expect(handler2.calls.length).toEqual(0)\n  })\n\n  it('should return the current state if no action matches', () => {\n    const handler1 = createMockFunction().returns('1')\n    const handler2 = createMockFunction().returns('2')\n    const reducer = createReducer('0')\n      .when({type: '1'}, handler1)\n      .when({type: '2'}, handler2)\n\n    expect(reducer('3', {type: '0'})).toEqual('3')\n    expect(handler1.calls.length).toEqual(0)\n    expect(handler2.calls.length).toEqual(0)\n  })\n\n  it('should pass the payload and state to the handler', () => {\n    const handler = createMockFunction()\n    const reducer = createReducer('0')\n      .when({type: '1'}, handler)\n\n    reducer('2', {type: '1', payload: '3'})\n\n    expect(handler.calls.length).toEqual(1)\n    expect(handler.calls[0].args).toEqual(['2', '3'])\n  })\n\n  describe('handlers returning a function to modify state', () => {\n\n    it('should pass the payload and state to the handler', () => {\n      const stateMapper = createMockFunction()\n      const handler = createMockFunction().returns(stateMapper)\n      const reducer = createReducer('0')\n        .when({type: '1'}, (_, payload) => handler(payload))\n\n      reducer('2', {type: '1', payload: '3'})\n\n      expect(handler.calls.length).toEqual(1)\n      expect(stateMapper.calls.length).toEqual(1)\n      expect(handler.calls[0].args).toEqual(['3'])\n      expect(stateMapper.calls[0].args).toEqual(['2'])\n    })\n\n    it('should return the value returned by the handler', () => {\n      const reducer = createReducer('0')\n        .when({type: '1'}, _ => _ => '3')\n\n      expect(reducer('2', {type: '1'})).toEqual('3')\n    })\n  })\n})\n\ndescribe('removeIn', () => {\n  it('should be able to remove a deep preoperty', () => {\n    const old = {deeply: {nested: {property: true}}}\n\n    const result = removeIn(['deeply', 'nested', 'property'], old)\n\n    expect(old.deeply.nested.property).toBe(true)\n    expect(result.deeply.nested.property).not.toBeDefined()\n  })\n\n  it('should be able to remove an intem in an array', () => {\n    const old = [1, 2, 3]\n\n    const result = removeIn(1, old)\n\n    expect(old).toEqual([1, 2, 3])\n    expect(result).toEqual([1, 3])\n  })\n})\n"]}