{"version":3,"sources":["src/index.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","createActions","actions","prefix","freeze","keys","reduce","type","exports","action","payload","createReducer","initialState","actionHandlers","reducer","state","filter","actionHandler","handler","builder","when","push","newState","build","clone","object","Array","isArray","updateIn","path","newValue","slice","key","cloned","removeIn","splice"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nfunction createActions(actions, { prefix = '' } = {}) {\n    return Object.freeze(Object.keys(actions).reduce((actions, type) => (__assign({}, actions, { [type]: __assign({ type: `${prefix}${type}` }, actions[type]) })), actions));\n}\nexports.createActions = createActions;\nfunction action(action, payload) {\n    return {\n        type: action.type,\n        payload,\n    };\n}\nexports.action = action;\nfunction createReducer(initialState) {\n    const actionHandlers = [];\n    function reducer(state, action) {\n        return actionHandlers\n            .filter(actionHandler => actionHandler.type === action.type)\n            .reduce((state, actionHandler) => actionHandler.handler(state, action.payload), state || initialState);\n    }\n    const builder = function builder(state, action) {\n        return reducer(state, action);\n    };\n    builder.when = (action, handler) => {\n        actionHandlers.push({ type: action.type, handler: (state, action) => {\n                const newState = handler(state, action);\n                if (typeof newState === 'function') {\n                    return newState(state);\n                }\n                return newState;\n            } });\n        return builder;\n    };\n    builder.build = () => reducer;\n    return builder;\n}\nexports.createReducer = createReducer;\nfunction clone(object) {\n    return Array.isArray(object)\n        ? [...object]\n        : __assign({}, object);\n}\nexports.clone = clone;\nfunction updateIn(path, newValue, object) {\n    if (arguments.length === 2) {\n        return (object) => updateIn(path, newValue, object);\n    }\n    if (Array.isArray(path) && path.length > 1) {\n        newValue = updateIn(path.slice(1), newValue, (object || {})[path[0]]);\n    }\n    const key = Array.isArray(path) ? path[0] : path;\n    const cloned = clone(object);\n    cloned[key] = newValue;\n    return cloned;\n}\nexports.updateIn = updateIn;\nfunction removeIn(path, object) {\n    if (arguments.length === 1) {\n        return (object) => removeIn(path, object);\n    }\n    if (Array.isArray(path) && path.length > 1) {\n        const newValue = removeIn(path.slice(1), (object || {})[path[0]]);\n        return updateIn(path[0], newValue, object);\n    }\n    const key = Array.isArray(path) ? path[0] : path;\n    const cloned = clone(object);\n    if (Array.isArray(cloned)) {\n        cloned.splice(key, 1);\n    }\n    else {\n        delete cloned[key];\n    }\n    return cloned;\n}\nexports.removeIn = removeIn;\n"]}